// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - Errno
//  - Errmsg
type LoginException struct {
	Errno  int32  `thrift:"errno,1" json:"errno"`
	Errmsg string `thrift:"errmsg,2" json:"errmsg"`
}

func NewLoginException() *LoginException {
	return &LoginException{}
}

func (p *LoginException) GetErrno() int32 {
	return p.Errno
}

func (p *LoginException) GetErrmsg() string {
	return p.Errmsg
}
func (p *LoginException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *LoginException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Errno = v
	}
	return nil
}

func (p *LoginException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Errmsg = v
	}
	return nil
}

func (p *LoginException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LoginException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *LoginException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errno", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errno: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Errno)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errno (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errno: ", p), err)
	}
	return err
}

func (p *LoginException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errmsg", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:errmsg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Errmsg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.errmsg (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:errmsg: ", p), err)
	}
	return err
}

func (p *LoginException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LoginException(%+v)", *p)
}

func (p *LoginException) Error() string {
	return p.String()
}
